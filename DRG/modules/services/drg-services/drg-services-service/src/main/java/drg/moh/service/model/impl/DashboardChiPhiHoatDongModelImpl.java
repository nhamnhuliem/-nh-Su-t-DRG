/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package drg.moh.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import drg.moh.service.model.DashboardChiPhiHoatDong;
import drg.moh.service.model.DashboardChiPhiHoatDongModel;
import drg.moh.service.model.DashboardChiPhiHoatDongSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DashboardChiPhiHoatDong service. Represents a row in the &quot;rp_dashboard_chiphi_hoatdong&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DashboardChiPhiHoatDongModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DashboardChiPhiHoatDongImpl}.
 * </p>
 *
 * @author SON
 * @see DashboardChiPhiHoatDongImpl
 * @generated
 */
@JSON(strict = true)
public class DashboardChiPhiHoatDongModelImpl
	extends BaseModelImpl<DashboardChiPhiHoatDong>
	implements DashboardChiPhiHoatDongModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dashboard chi phi hoat dong model instance should use the <code>DashboardChiPhiHoatDong</code> interface instead.
	 */
	public static final String TABLE_NAME = "rp_dashboard_chiphi_hoatdong";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"muc_bc", Types.INTEGER}, {"nam", Types.INTEGER},
		{"organization_id", Types.BIGINT}, {"organization_name", Types.VARCHAR},
		{"thanhphan_id", Types.VARCHAR}, {"thanhphan_ma", Types.VARCHAR},
		{"thanhphan_ten", Types.VARCHAR}, {"drg_phidv", Types.DOUBLE},
		{"drg_dinhsuat", Types.DOUBLE}, {"drg_values", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("muc_bc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nam", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("organization_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organization_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thanhphan_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thanhphan_ma", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thanhphan_ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("drg_phidv", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("drg_dinhsuat", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("drg_values", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rp_dashboard_chiphi_hoatdong (id LONG not null primary key,muc_bc INTEGER,nam INTEGER,organization_id LONG,organization_name VARCHAR(75) null,thanhphan_id VARCHAR(75) null,thanhphan_ma VARCHAR(75) null,thanhphan_ten VARCHAR(75) null,drg_phidv DOUBLE,drg_dinhsuat DOUBLE,drg_values DOUBLE)";

	public static final String TABLE_SQL_DROP =
		"drop table rp_dashboard_chiphi_hoatdong";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dashboardChiPhiHoatDong.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rp_dashboard_chiphi_hoatdong.id ASC";

	public static final String DATA_SOURCE = "drgDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MUCBC_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAM_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ORGID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static DashboardChiPhiHoatDong toModel(
		DashboardChiPhiHoatDongSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		DashboardChiPhiHoatDong model = new DashboardChiPhiHoatDongImpl();

		model.setId(soapModel.getId());
		model.setMucBc(soapModel.getMucBc());
		model.setNam(soapModel.getNam());
		model.setOrgId(soapModel.getOrgId());
		model.setOrgName(soapModel.getOrgName());
		model.setThanhPhanId(soapModel.getThanhPhanId());
		model.setThanhPhanMa(soapModel.getThanhPhanMa());
		model.setThanhPhanTen(soapModel.getThanhPhanTen());
		model.setDrgPhiDv(soapModel.getDrgPhiDv());
		model.setDrgDinhSuat(soapModel.getDrgDinhSuat());
		model.setDrgValues(soapModel.getDrgValues());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<DashboardChiPhiHoatDong> toModels(
		DashboardChiPhiHoatDongSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<DashboardChiPhiHoatDong> models =
			new ArrayList<DashboardChiPhiHoatDong>(soapModels.length);

		for (DashboardChiPhiHoatDongSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		drg.moh.service.service.util.ServiceProps.get(
			"lock.expiration.time.drg.moh.service.model.DashboardChiPhiHoatDong"));

	public DashboardChiPhiHoatDongModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DashboardChiPhiHoatDong.class;
	}

	@Override
	public String getModelClassName() {
		return DashboardChiPhiHoatDong.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DashboardChiPhiHoatDong, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DashboardChiPhiHoatDong, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DashboardChiPhiHoatDong, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DashboardChiPhiHoatDong)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DashboardChiPhiHoatDong, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DashboardChiPhiHoatDong, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DashboardChiPhiHoatDong)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DashboardChiPhiHoatDong, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DashboardChiPhiHoatDong, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DashboardChiPhiHoatDong>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DashboardChiPhiHoatDong.class.getClassLoader(),
			DashboardChiPhiHoatDong.class, ModelWrapper.class);

		try {
			Constructor<DashboardChiPhiHoatDong> constructor =
				(Constructor<DashboardChiPhiHoatDong>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DashboardChiPhiHoatDong, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<DashboardChiPhiHoatDong, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<DashboardChiPhiHoatDong, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DashboardChiPhiHoatDong, Object>>();
		Map<String, BiConsumer<DashboardChiPhiHoatDong, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<DashboardChiPhiHoatDong, ?>>();

		attributeGetterFunctions.put("id", DashboardChiPhiHoatDong::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<DashboardChiPhiHoatDong, Long>)
				DashboardChiPhiHoatDong::setId);
		attributeGetterFunctions.put(
			"mucBc", DashboardChiPhiHoatDong::getMucBc);
		attributeSetterBiConsumers.put(
			"mucBc",
			(BiConsumer<DashboardChiPhiHoatDong, Integer>)
				DashboardChiPhiHoatDong::setMucBc);
		attributeGetterFunctions.put("nam", DashboardChiPhiHoatDong::getNam);
		attributeSetterBiConsumers.put(
			"nam",
			(BiConsumer<DashboardChiPhiHoatDong, Integer>)
				DashboardChiPhiHoatDong::setNam);
		attributeGetterFunctions.put(
			"orgId", DashboardChiPhiHoatDong::getOrgId);
		attributeSetterBiConsumers.put(
			"orgId",
			(BiConsumer<DashboardChiPhiHoatDong, Long>)
				DashboardChiPhiHoatDong::setOrgId);
		attributeGetterFunctions.put(
			"orgName", DashboardChiPhiHoatDong::getOrgName);
		attributeSetterBiConsumers.put(
			"orgName",
			(BiConsumer<DashboardChiPhiHoatDong, String>)
				DashboardChiPhiHoatDong::setOrgName);
		attributeGetterFunctions.put(
			"thanhPhanId", DashboardChiPhiHoatDong::getThanhPhanId);
		attributeSetterBiConsumers.put(
			"thanhPhanId",
			(BiConsumer<DashboardChiPhiHoatDong, String>)
				DashboardChiPhiHoatDong::setThanhPhanId);
		attributeGetterFunctions.put(
			"thanhPhanMa", DashboardChiPhiHoatDong::getThanhPhanMa);
		attributeSetterBiConsumers.put(
			"thanhPhanMa",
			(BiConsumer<DashboardChiPhiHoatDong, String>)
				DashboardChiPhiHoatDong::setThanhPhanMa);
		attributeGetterFunctions.put(
			"thanhPhanTen", DashboardChiPhiHoatDong::getThanhPhanTen);
		attributeSetterBiConsumers.put(
			"thanhPhanTen",
			(BiConsumer<DashboardChiPhiHoatDong, String>)
				DashboardChiPhiHoatDong::setThanhPhanTen);
		attributeGetterFunctions.put(
			"drgPhiDv", DashboardChiPhiHoatDong::getDrgPhiDv);
		attributeSetterBiConsumers.put(
			"drgPhiDv",
			(BiConsumer<DashboardChiPhiHoatDong, Double>)
				DashboardChiPhiHoatDong::setDrgPhiDv);
		attributeGetterFunctions.put(
			"drgDinhSuat", DashboardChiPhiHoatDong::getDrgDinhSuat);
		attributeSetterBiConsumers.put(
			"drgDinhSuat",
			(BiConsumer<DashboardChiPhiHoatDong, Double>)
				DashboardChiPhiHoatDong::setDrgDinhSuat);
		attributeGetterFunctions.put(
			"drgValues", DashboardChiPhiHoatDong::getDrgValues);
		attributeSetterBiConsumers.put(
			"drgValues",
			(BiConsumer<DashboardChiPhiHoatDong, Double>)
				DashboardChiPhiHoatDong::setDrgValues);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public int getMucBc() {
		return _mucBc;
	}

	@Override
	public void setMucBc(int mucBc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mucBc = mucBc;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalMucBc() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("muc_bc"));
	}

	@JSON
	@Override
	public int getNam() {
		return _nam;
	}

	@Override
	public void setNam(int nam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nam = nam;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalNam() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("nam"));
	}

	@JSON
	@Override
	public long getOrgId() {
		return _orgId;
	}

	@Override
	public void setOrgId(long orgId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgId = orgId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrgId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("organization_id"));
	}

	@JSON
	@Override
	public String getOrgName() {
		if (_orgName == null) {
			return "";
		}
		else {
			return _orgName;
		}
	}

	@Override
	public void setOrgName(String orgName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgName = orgName;
	}

	@JSON
	@Override
	public String getThanhPhanId() {
		if (_thanhPhanId == null) {
			return "";
		}
		else {
			return _thanhPhanId;
		}
	}

	@Override
	public void setThanhPhanId(String thanhPhanId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thanhPhanId = thanhPhanId;
	}

	@JSON
	@Override
	public String getThanhPhanMa() {
		if (_thanhPhanMa == null) {
			return "";
		}
		else {
			return _thanhPhanMa;
		}
	}

	@Override
	public void setThanhPhanMa(String thanhPhanMa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thanhPhanMa = thanhPhanMa;
	}

	@JSON
	@Override
	public String getThanhPhanTen() {
		if (_thanhPhanTen == null) {
			return "";
		}
		else {
			return _thanhPhanTen;
		}
	}

	@Override
	public void setThanhPhanTen(String thanhPhanTen) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thanhPhanTen = thanhPhanTen;
	}

	@JSON
	@Override
	public double getDrgPhiDv() {
		return _drgPhiDv;
	}

	@Override
	public void setDrgPhiDv(double drgPhiDv) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drgPhiDv = drgPhiDv;
	}

	@JSON
	@Override
	public double getDrgDinhSuat() {
		return _drgDinhSuat;
	}

	@Override
	public void setDrgDinhSuat(double drgDinhSuat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drgDinhSuat = drgDinhSuat;
	}

	@JSON
	@Override
	public double getDrgValues() {
		return _drgValues;
	}

	@Override
	public void setDrgValues(double drgValues) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drgValues = drgValues;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DashboardChiPhiHoatDong.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DashboardChiPhiHoatDong toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DashboardChiPhiHoatDong>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DashboardChiPhiHoatDongImpl dashboardChiPhiHoatDongImpl =
			new DashboardChiPhiHoatDongImpl();

		dashboardChiPhiHoatDongImpl.setId(getId());
		dashboardChiPhiHoatDongImpl.setMucBc(getMucBc());
		dashboardChiPhiHoatDongImpl.setNam(getNam());
		dashboardChiPhiHoatDongImpl.setOrgId(getOrgId());
		dashboardChiPhiHoatDongImpl.setOrgName(getOrgName());
		dashboardChiPhiHoatDongImpl.setThanhPhanId(getThanhPhanId());
		dashboardChiPhiHoatDongImpl.setThanhPhanMa(getThanhPhanMa());
		dashboardChiPhiHoatDongImpl.setThanhPhanTen(getThanhPhanTen());
		dashboardChiPhiHoatDongImpl.setDrgPhiDv(getDrgPhiDv());
		dashboardChiPhiHoatDongImpl.setDrgDinhSuat(getDrgDinhSuat());
		dashboardChiPhiHoatDongImpl.setDrgValues(getDrgValues());

		dashboardChiPhiHoatDongImpl.resetOriginalValues();

		return dashboardChiPhiHoatDongImpl;
	}

	@Override
	public int compareTo(DashboardChiPhiHoatDong dashboardChiPhiHoatDong) {
		long primaryKey = dashboardChiPhiHoatDong.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DashboardChiPhiHoatDong)) {
			return false;
		}

		DashboardChiPhiHoatDong dashboardChiPhiHoatDong =
			(DashboardChiPhiHoatDong)object;

		long primaryKey = dashboardChiPhiHoatDong.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DashboardChiPhiHoatDong> toCacheModel() {
		DashboardChiPhiHoatDongCacheModel dashboardChiPhiHoatDongCacheModel =
			new DashboardChiPhiHoatDongCacheModel();

		dashboardChiPhiHoatDongCacheModel.id = getId();

		dashboardChiPhiHoatDongCacheModel.mucBc = getMucBc();

		dashboardChiPhiHoatDongCacheModel.nam = getNam();

		dashboardChiPhiHoatDongCacheModel.orgId = getOrgId();

		dashboardChiPhiHoatDongCacheModel.orgName = getOrgName();

		String orgName = dashboardChiPhiHoatDongCacheModel.orgName;

		if ((orgName != null) && (orgName.length() == 0)) {
			dashboardChiPhiHoatDongCacheModel.orgName = null;
		}

		dashboardChiPhiHoatDongCacheModel.thanhPhanId = getThanhPhanId();

		String thanhPhanId = dashboardChiPhiHoatDongCacheModel.thanhPhanId;

		if ((thanhPhanId != null) && (thanhPhanId.length() == 0)) {
			dashboardChiPhiHoatDongCacheModel.thanhPhanId = null;
		}

		dashboardChiPhiHoatDongCacheModel.thanhPhanMa = getThanhPhanMa();

		String thanhPhanMa = dashboardChiPhiHoatDongCacheModel.thanhPhanMa;

		if ((thanhPhanMa != null) && (thanhPhanMa.length() == 0)) {
			dashboardChiPhiHoatDongCacheModel.thanhPhanMa = null;
		}

		dashboardChiPhiHoatDongCacheModel.thanhPhanTen = getThanhPhanTen();

		String thanhPhanTen = dashboardChiPhiHoatDongCacheModel.thanhPhanTen;

		if ((thanhPhanTen != null) && (thanhPhanTen.length() == 0)) {
			dashboardChiPhiHoatDongCacheModel.thanhPhanTen = null;
		}

		dashboardChiPhiHoatDongCacheModel.drgPhiDv = getDrgPhiDv();

		dashboardChiPhiHoatDongCacheModel.drgDinhSuat = getDrgDinhSuat();

		dashboardChiPhiHoatDongCacheModel.drgValues = getDrgValues();

		return dashboardChiPhiHoatDongCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DashboardChiPhiHoatDong, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DashboardChiPhiHoatDong, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DashboardChiPhiHoatDong, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((DashboardChiPhiHoatDong)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DashboardChiPhiHoatDong, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DashboardChiPhiHoatDong, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DashboardChiPhiHoatDong, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((DashboardChiPhiHoatDong)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, DashboardChiPhiHoatDong>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private long _id;
	private int _mucBc;
	private int _nam;
	private long _orgId;
	private String _orgName;
	private String _thanhPhanId;
	private String _thanhPhanMa;
	private String _thanhPhanTen;
	private double _drgPhiDv;
	private double _drgDinhSuat;
	private double _drgValues;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DashboardChiPhiHoatDong, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DashboardChiPhiHoatDong)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id", _id);
		_columnOriginalValues.put("muc_bc", _mucBc);
		_columnOriginalValues.put("nam", _nam);
		_columnOriginalValues.put("organization_id", _orgId);
		_columnOriginalValues.put("organization_name", _orgName);
		_columnOriginalValues.put("thanhphan_id", _thanhPhanId);
		_columnOriginalValues.put("thanhphan_ma", _thanhPhanMa);
		_columnOriginalValues.put("thanhphan_ten", _thanhPhanTen);
		_columnOriginalValues.put("drg_phidv", _drgPhiDv);
		_columnOriginalValues.put("drg_dinhsuat", _drgDinhSuat);
		_columnOriginalValues.put("drg_values", _drgValues);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("muc_bc", "mucBc");
		attributeNames.put("organization_id", "orgId");
		attributeNames.put("organization_name", "orgName");
		attributeNames.put("thanhphan_id", "thanhPhanId");
		attributeNames.put("thanhphan_ma", "thanhPhanMa");
		attributeNames.put("thanhphan_ten", "thanhPhanTen");
		attributeNames.put("drg_phidv", "drgPhiDv");
		attributeNames.put("drg_dinhsuat", "drgDinhSuat");
		attributeNames.put("drg_values", "drgValues");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id", 1L);

		columnBitmasks.put("muc_bc", 2L);

		columnBitmasks.put("nam", 4L);

		columnBitmasks.put("organization_id", 8L);

		columnBitmasks.put("organization_name", 16L);

		columnBitmasks.put("thanhphan_id", 32L);

		columnBitmasks.put("thanhphan_ma", 64L);

		columnBitmasks.put("thanhphan_ten", 128L);

		columnBitmasks.put("drg_phidv", 256L);

		columnBitmasks.put("drg_dinhsuat", 512L);

		columnBitmasks.put("drg_values", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DashboardChiPhiHoatDong _escapedModel;

}