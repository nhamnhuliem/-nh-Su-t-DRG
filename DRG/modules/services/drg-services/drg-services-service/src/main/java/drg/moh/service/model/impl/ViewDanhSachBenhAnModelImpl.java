/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package drg.moh.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import drg.moh.service.model.ViewDanhSachBenhAn;
import drg.moh.service.model.ViewDanhSachBenhAnModel;
import drg.moh.service.model.ViewDanhSachBenhAnSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ViewDanhSachBenhAn service. Represents a row in the &quot;view_danhsach_hsba&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ViewDanhSachBenhAnModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ViewDanhSachBenhAnImpl}.
 * </p>
 *
 * @author SON
 * @see ViewDanhSachBenhAnImpl
 * @generated
 */
@JSON(strict = true)
public class ViewDanhSachBenhAnModelImpl
	extends BaseModelImpl<ViewDanhSachBenhAn>
	implements ViewDanhSachBenhAnModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a view danh sach benh an model instance should use the <code>ViewDanhSachBenhAn</code> interface instead.
	 */
	public static final String TABLE_NAME = "view_danhsach_hsba";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"organization_id", Types.BIGINT},
		{"ma_cskcb", Types.VARCHAR}, {"ten_cskcb", Types.VARCHAR},
		{"ma_lk", Types.VARCHAR}, {"ma_bn", Types.VARCHAR},
		{"ho_ten", Types.VARCHAR}, {"ma_the", Types.VARCHAR},
		{"nam", Types.INTEGER}, {"drg_chiphi", Types.DOUBLE},
		{"drg_dinhsuat", Types.DOUBLE}, {"drg_giatri", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organization_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ma_cskcb", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ten_cskcb", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ma_lk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ma_bn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ho_ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ma_the", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nam", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("drg_chiphi", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("drg_dinhsuat", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("drg_giatri", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table view_danhsach_hsba (id LONG not null primary key,organization_id LONG,ma_cskcb VARCHAR(75) null,ten_cskcb VARCHAR(75) null,ma_lk VARCHAR(75) null,ma_bn VARCHAR(75) null,ho_ten VARCHAR(75) null,ma_the VARCHAR(75) null,nam INTEGER,drg_chiphi DOUBLE,drg_dinhsuat DOUBLE,drg_giatri DOUBLE)";

	public static final String TABLE_SQL_DROP = "drop table view_danhsach_hsba";

	public static final String ORDER_BY_JPQL =
		" ORDER BY viewDanhSachBenhAn.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY view_danhsach_hsba.id ASC";

	public static final String DATA_SOURCE = "drgDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAM_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ORGID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ViewDanhSachBenhAn toModel(ViewDanhSachBenhAnSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ViewDanhSachBenhAn model = new ViewDanhSachBenhAnImpl();

		model.setId(soapModel.getId());
		model.setOrgId(soapModel.getOrgId());
		model.setMaCoSo(soapModel.getMaCoSo());
		model.setTenCoSo(soapModel.getTenCoSo());
		model.setMaHoSo(soapModel.getMaHoSo());
		model.setMaBenhNhan(soapModel.getMaBenhNhan());
		model.setHoTen(soapModel.getHoTen());
		model.setMaThe(soapModel.getMaThe());
		model.setNam(soapModel.getNam());
		model.setChiPhi(soapModel.getChiPhi());
		model.setDinhSuat(soapModel.getDinhSuat());
		model.setGiaTri(soapModel.getGiaTri());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ViewDanhSachBenhAn> toModels(
		ViewDanhSachBenhAnSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ViewDanhSachBenhAn> models = new ArrayList<ViewDanhSachBenhAn>(
			soapModels.length);

		for (ViewDanhSachBenhAnSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		drg.moh.service.service.util.ServiceProps.get(
			"lock.expiration.time.drg.moh.service.model.ViewDanhSachBenhAn"));

	public ViewDanhSachBenhAnModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ViewDanhSachBenhAn.class;
	}

	@Override
	public String getModelClassName() {
		return ViewDanhSachBenhAn.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ViewDanhSachBenhAn, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ViewDanhSachBenhAn, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ViewDanhSachBenhAn, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ViewDanhSachBenhAn)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ViewDanhSachBenhAn, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ViewDanhSachBenhAn, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ViewDanhSachBenhAn)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ViewDanhSachBenhAn, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ViewDanhSachBenhAn, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ViewDanhSachBenhAn>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ViewDanhSachBenhAn.class.getClassLoader(), ViewDanhSachBenhAn.class,
			ModelWrapper.class);

		try {
			Constructor<ViewDanhSachBenhAn> constructor =
				(Constructor<ViewDanhSachBenhAn>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ViewDanhSachBenhAn, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ViewDanhSachBenhAn, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ViewDanhSachBenhAn, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ViewDanhSachBenhAn, Object>>();
		Map<String, BiConsumer<ViewDanhSachBenhAn, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ViewDanhSachBenhAn, ?>>();

		attributeGetterFunctions.put("id", ViewDanhSachBenhAn::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<ViewDanhSachBenhAn, Long>)ViewDanhSachBenhAn::setId);
		attributeGetterFunctions.put("orgId", ViewDanhSachBenhAn::getOrgId);
		attributeSetterBiConsumers.put(
			"orgId",
			(BiConsumer<ViewDanhSachBenhAn, Long>)ViewDanhSachBenhAn::setOrgId);
		attributeGetterFunctions.put("maCoSo", ViewDanhSachBenhAn::getMaCoSo);
		attributeSetterBiConsumers.put(
			"maCoSo",
			(BiConsumer<ViewDanhSachBenhAn, String>)
				ViewDanhSachBenhAn::setMaCoSo);
		attributeGetterFunctions.put("tenCoSo", ViewDanhSachBenhAn::getTenCoSo);
		attributeSetterBiConsumers.put(
			"tenCoSo",
			(BiConsumer<ViewDanhSachBenhAn, String>)
				ViewDanhSachBenhAn::setTenCoSo);
		attributeGetterFunctions.put("maHoSo", ViewDanhSachBenhAn::getMaHoSo);
		attributeSetterBiConsumers.put(
			"maHoSo",
			(BiConsumer<ViewDanhSachBenhAn, String>)
				ViewDanhSachBenhAn::setMaHoSo);
		attributeGetterFunctions.put(
			"maBenhNhan", ViewDanhSachBenhAn::getMaBenhNhan);
		attributeSetterBiConsumers.put(
			"maBenhNhan",
			(BiConsumer<ViewDanhSachBenhAn, String>)
				ViewDanhSachBenhAn::setMaBenhNhan);
		attributeGetterFunctions.put("hoTen", ViewDanhSachBenhAn::getHoTen);
		attributeSetterBiConsumers.put(
			"hoTen",
			(BiConsumer<ViewDanhSachBenhAn, String>)
				ViewDanhSachBenhAn::setHoTen);
		attributeGetterFunctions.put("maThe", ViewDanhSachBenhAn::getMaThe);
		attributeSetterBiConsumers.put(
			"maThe",
			(BiConsumer<ViewDanhSachBenhAn, String>)
				ViewDanhSachBenhAn::setMaThe);
		attributeGetterFunctions.put("nam", ViewDanhSachBenhAn::getNam);
		attributeSetterBiConsumers.put(
			"nam",
			(BiConsumer<ViewDanhSachBenhAn, Integer>)
				ViewDanhSachBenhAn::setNam);
		attributeGetterFunctions.put("chiPhi", ViewDanhSachBenhAn::getChiPhi);
		attributeSetterBiConsumers.put(
			"chiPhi",
			(BiConsumer<ViewDanhSachBenhAn, Double>)
				ViewDanhSachBenhAn::setChiPhi);
		attributeGetterFunctions.put(
			"dinhSuat", ViewDanhSachBenhAn::getDinhSuat);
		attributeSetterBiConsumers.put(
			"dinhSuat",
			(BiConsumer<ViewDanhSachBenhAn, Double>)
				ViewDanhSachBenhAn::setDinhSuat);
		attributeGetterFunctions.put("giaTri", ViewDanhSachBenhAn::getGiaTri);
		attributeSetterBiConsumers.put(
			"giaTri",
			(BiConsumer<ViewDanhSachBenhAn, Double>)
				ViewDanhSachBenhAn::setGiaTri);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getOrgId() {
		return _orgId;
	}

	@Override
	public void setOrgId(long orgId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgId = orgId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrgId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("organization_id"));
	}

	@JSON
	@Override
	public String getMaCoSo() {
		if (_maCoSo == null) {
			return "";
		}
		else {
			return _maCoSo;
		}
	}

	@Override
	public void setMaCoSo(String maCoSo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maCoSo = maCoSo;
	}

	@JSON
	@Override
	public String getTenCoSo() {
		if (_tenCoSo == null) {
			return "";
		}
		else {
			return _tenCoSo;
		}
	}

	@Override
	public void setTenCoSo(String tenCoSo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tenCoSo = tenCoSo;
	}

	@JSON
	@Override
	public String getMaHoSo() {
		if (_maHoSo == null) {
			return "";
		}
		else {
			return _maHoSo;
		}
	}

	@Override
	public void setMaHoSo(String maHoSo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maHoSo = maHoSo;
	}

	@JSON
	@Override
	public String getMaBenhNhan() {
		if (_maBenhNhan == null) {
			return "";
		}
		else {
			return _maBenhNhan;
		}
	}

	@Override
	public void setMaBenhNhan(String maBenhNhan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maBenhNhan = maBenhNhan;
	}

	@JSON
	@Override
	public String getHoTen() {
		if (_hoTen == null) {
			return "";
		}
		else {
			return _hoTen;
		}
	}

	@Override
	public void setHoTen(String hoTen) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hoTen = hoTen;
	}

	@JSON
	@Override
	public String getMaThe() {
		if (_maThe == null) {
			return "";
		}
		else {
			return _maThe;
		}
	}

	@Override
	public void setMaThe(String maThe) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maThe = maThe;
	}

	@JSON
	@Override
	public int getNam() {
		return _nam;
	}

	@Override
	public void setNam(int nam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nam = nam;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalNam() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("nam"));
	}

	@JSON
	@Override
	public double getChiPhi() {
		return _chiPhi;
	}

	@Override
	public void setChiPhi(double chiPhi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_chiPhi = chiPhi;
	}

	@JSON
	@Override
	public double getDinhSuat() {
		return _dinhSuat;
	}

	@Override
	public void setDinhSuat(double dinhSuat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dinhSuat = dinhSuat;
	}

	@JSON
	@Override
	public double getGiaTri() {
		return _giaTri;
	}

	@Override
	public void setGiaTri(double giaTri) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_giaTri = giaTri;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ViewDanhSachBenhAn.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ViewDanhSachBenhAn toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ViewDanhSachBenhAn>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ViewDanhSachBenhAnImpl viewDanhSachBenhAnImpl =
			new ViewDanhSachBenhAnImpl();

		viewDanhSachBenhAnImpl.setId(getId());
		viewDanhSachBenhAnImpl.setOrgId(getOrgId());
		viewDanhSachBenhAnImpl.setMaCoSo(getMaCoSo());
		viewDanhSachBenhAnImpl.setTenCoSo(getTenCoSo());
		viewDanhSachBenhAnImpl.setMaHoSo(getMaHoSo());
		viewDanhSachBenhAnImpl.setMaBenhNhan(getMaBenhNhan());
		viewDanhSachBenhAnImpl.setHoTen(getHoTen());
		viewDanhSachBenhAnImpl.setMaThe(getMaThe());
		viewDanhSachBenhAnImpl.setNam(getNam());
		viewDanhSachBenhAnImpl.setChiPhi(getChiPhi());
		viewDanhSachBenhAnImpl.setDinhSuat(getDinhSuat());
		viewDanhSachBenhAnImpl.setGiaTri(getGiaTri());

		viewDanhSachBenhAnImpl.resetOriginalValues();

		return viewDanhSachBenhAnImpl;
	}

	@Override
	public int compareTo(ViewDanhSachBenhAn viewDanhSachBenhAn) {
		long primaryKey = viewDanhSachBenhAn.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ViewDanhSachBenhAn)) {
			return false;
		}

		ViewDanhSachBenhAn viewDanhSachBenhAn = (ViewDanhSachBenhAn)object;

		long primaryKey = viewDanhSachBenhAn.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ViewDanhSachBenhAn> toCacheModel() {
		ViewDanhSachBenhAnCacheModel viewDanhSachBenhAnCacheModel =
			new ViewDanhSachBenhAnCacheModel();

		viewDanhSachBenhAnCacheModel.id = getId();

		viewDanhSachBenhAnCacheModel.orgId = getOrgId();

		viewDanhSachBenhAnCacheModel.maCoSo = getMaCoSo();

		String maCoSo = viewDanhSachBenhAnCacheModel.maCoSo;

		if ((maCoSo != null) && (maCoSo.length() == 0)) {
			viewDanhSachBenhAnCacheModel.maCoSo = null;
		}

		viewDanhSachBenhAnCacheModel.tenCoSo = getTenCoSo();

		String tenCoSo = viewDanhSachBenhAnCacheModel.tenCoSo;

		if ((tenCoSo != null) && (tenCoSo.length() == 0)) {
			viewDanhSachBenhAnCacheModel.tenCoSo = null;
		}

		viewDanhSachBenhAnCacheModel.maHoSo = getMaHoSo();

		String maHoSo = viewDanhSachBenhAnCacheModel.maHoSo;

		if ((maHoSo != null) && (maHoSo.length() == 0)) {
			viewDanhSachBenhAnCacheModel.maHoSo = null;
		}

		viewDanhSachBenhAnCacheModel.maBenhNhan = getMaBenhNhan();

		String maBenhNhan = viewDanhSachBenhAnCacheModel.maBenhNhan;

		if ((maBenhNhan != null) && (maBenhNhan.length() == 0)) {
			viewDanhSachBenhAnCacheModel.maBenhNhan = null;
		}

		viewDanhSachBenhAnCacheModel.hoTen = getHoTen();

		String hoTen = viewDanhSachBenhAnCacheModel.hoTen;

		if ((hoTen != null) && (hoTen.length() == 0)) {
			viewDanhSachBenhAnCacheModel.hoTen = null;
		}

		viewDanhSachBenhAnCacheModel.maThe = getMaThe();

		String maThe = viewDanhSachBenhAnCacheModel.maThe;

		if ((maThe != null) && (maThe.length() == 0)) {
			viewDanhSachBenhAnCacheModel.maThe = null;
		}

		viewDanhSachBenhAnCacheModel.nam = getNam();

		viewDanhSachBenhAnCacheModel.chiPhi = getChiPhi();

		viewDanhSachBenhAnCacheModel.dinhSuat = getDinhSuat();

		viewDanhSachBenhAnCacheModel.giaTri = getGiaTri();

		return viewDanhSachBenhAnCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ViewDanhSachBenhAn, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ViewDanhSachBenhAn, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ViewDanhSachBenhAn, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ViewDanhSachBenhAn)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ViewDanhSachBenhAn, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ViewDanhSachBenhAn, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ViewDanhSachBenhAn, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ViewDanhSachBenhAn)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ViewDanhSachBenhAn>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private long _orgId;
	private String _maCoSo;
	private String _tenCoSo;
	private String _maHoSo;
	private String _maBenhNhan;
	private String _hoTen;
	private String _maThe;
	private int _nam;
	private double _chiPhi;
	private double _dinhSuat;
	private double _giaTri;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ViewDanhSachBenhAn, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ViewDanhSachBenhAn)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id", _id);
		_columnOriginalValues.put("organization_id", _orgId);
		_columnOriginalValues.put("ma_cskcb", _maCoSo);
		_columnOriginalValues.put("ten_cskcb", _tenCoSo);
		_columnOriginalValues.put("ma_lk", _maHoSo);
		_columnOriginalValues.put("ma_bn", _maBenhNhan);
		_columnOriginalValues.put("ho_ten", _hoTen);
		_columnOriginalValues.put("ma_the", _maThe);
		_columnOriginalValues.put("nam", _nam);
		_columnOriginalValues.put("drg_chiphi", _chiPhi);
		_columnOriginalValues.put("drg_dinhsuat", _dinhSuat);
		_columnOriginalValues.put("drg_giatri", _giaTri);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("organization_id", "orgId");
		attributeNames.put("ma_cskcb", "maCoSo");
		attributeNames.put("ten_cskcb", "tenCoSo");
		attributeNames.put("ma_lk", "maHoSo");
		attributeNames.put("ma_bn", "maBenhNhan");
		attributeNames.put("ho_ten", "hoTen");
		attributeNames.put("ma_the", "maThe");
		attributeNames.put("drg_chiphi", "chiPhi");
		attributeNames.put("drg_dinhsuat", "dinhSuat");
		attributeNames.put("drg_giatri", "giaTri");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id", 1L);

		columnBitmasks.put("organization_id", 2L);

		columnBitmasks.put("ma_cskcb", 4L);

		columnBitmasks.put("ten_cskcb", 8L);

		columnBitmasks.put("ma_lk", 16L);

		columnBitmasks.put("ma_bn", 32L);

		columnBitmasks.put("ho_ten", 64L);

		columnBitmasks.put("ma_the", 128L);

		columnBitmasks.put("nam", 256L);

		columnBitmasks.put("drg_chiphi", 512L);

		columnBitmasks.put("drg_dinhsuat", 1024L);

		columnBitmasks.put("drg_giatri", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ViewDanhSachBenhAn _escapedModel;

}