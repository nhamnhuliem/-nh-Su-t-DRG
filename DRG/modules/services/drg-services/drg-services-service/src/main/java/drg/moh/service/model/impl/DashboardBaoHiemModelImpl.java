/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package drg.moh.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import drg.moh.service.model.DashboardBaoHiem;
import drg.moh.service.model.DashboardBaoHiemModel;
import drg.moh.service.model.DashboardBaoHiemSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DashboardBaoHiem service. Represents a row in the &quot;rp_dashboard_baohiem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DashboardBaoHiemModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DashboardBaoHiemImpl}.
 * </p>
 *
 * @author SON
 * @see DashboardBaoHiemImpl
 * @generated
 */
@JSON(strict = true)
public class DashboardBaoHiemModelImpl
	extends BaseModelImpl<DashboardBaoHiem> implements DashboardBaoHiemModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dashboard bao hiem model instance should use the <code>DashboardBaoHiem</code> interface instead.
	 */
	public static final String TABLE_NAME = "rp_dashboard_baohiem";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"muc_bc", Types.INTEGER}, {"nam", Types.INTEGER},
		{"thang", Types.INTEGER}, {"organization_id", Types.BIGINT},
		{"organization_name", Types.VARCHAR}, {"drg_ma", Types.VARCHAR},
		{"drg_ten", Types.VARCHAR}, {"drg_value", Types.DOUBLE},
		{"drg_up", Types.DOUBLE}, {"drg_down", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("muc_bc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nam", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("thang", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("organization_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organization_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("drg_ma", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("drg_ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("drg_value", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("drg_up", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("drg_down", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rp_dashboard_baohiem (id LONG not null primary key,muc_bc INTEGER,nam INTEGER,thang INTEGER,organization_id LONG,organization_name VARCHAR(75) null,drg_ma VARCHAR(75) null,drg_ten VARCHAR(75) null,drg_value DOUBLE,drg_up DOUBLE,drg_down DOUBLE)";

	public static final String TABLE_SQL_DROP =
		"drop table rp_dashboard_baohiem";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dashboardBaoHiem.thang ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rp_dashboard_baohiem.thang ASC";

	public static final String DATA_SOURCE = "drgDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MUCBC_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAM_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ORGID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long THANG_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static DashboardBaoHiem toModel(DashboardBaoHiemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DashboardBaoHiem model = new DashboardBaoHiemImpl();

		model.setId(soapModel.getId());
		model.setMucBc(soapModel.getMucBc());
		model.setNam(soapModel.getNam());
		model.setThang(soapModel.getThang());
		model.setOrgId(soapModel.getOrgId());
		model.setOrgName(soapModel.getOrgName());
		model.setDrgMa(soapModel.getDrgMa());
		model.setDrgTen(soapModel.getDrgTen());
		model.setDrgValue(soapModel.getDrgValue());
		model.setDrgUp(soapModel.getDrgUp());
		model.setDrgDown(soapModel.getDrgDown());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<DashboardBaoHiem> toModels(
		DashboardBaoHiemSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<DashboardBaoHiem> models = new ArrayList<DashboardBaoHiem>(
			soapModels.length);

		for (DashboardBaoHiemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		drg.moh.service.service.util.ServiceProps.get(
			"lock.expiration.time.drg.moh.service.model.DashboardBaoHiem"));

	public DashboardBaoHiemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DashboardBaoHiem.class;
	}

	@Override
	public String getModelClassName() {
		return DashboardBaoHiem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DashboardBaoHiem, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DashboardBaoHiem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DashboardBaoHiem, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DashboardBaoHiem)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DashboardBaoHiem, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DashboardBaoHiem, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DashboardBaoHiem)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DashboardBaoHiem, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DashboardBaoHiem, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DashboardBaoHiem>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DashboardBaoHiem.class.getClassLoader(), DashboardBaoHiem.class,
			ModelWrapper.class);

		try {
			Constructor<DashboardBaoHiem> constructor =
				(Constructor<DashboardBaoHiem>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DashboardBaoHiem, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DashboardBaoHiem, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DashboardBaoHiem, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<DashboardBaoHiem, Object>>();
		Map<String, BiConsumer<DashboardBaoHiem, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DashboardBaoHiem, ?>>();

		attributeGetterFunctions.put("id", DashboardBaoHiem::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<DashboardBaoHiem, Long>)DashboardBaoHiem::setId);
		attributeGetterFunctions.put("mucBc", DashboardBaoHiem::getMucBc);
		attributeSetterBiConsumers.put(
			"mucBc",
			(BiConsumer<DashboardBaoHiem, Integer>)DashboardBaoHiem::setMucBc);
		attributeGetterFunctions.put("nam", DashboardBaoHiem::getNam);
		attributeSetterBiConsumers.put(
			"nam",
			(BiConsumer<DashboardBaoHiem, Integer>)DashboardBaoHiem::setNam);
		attributeGetterFunctions.put("thang", DashboardBaoHiem::getThang);
		attributeSetterBiConsumers.put(
			"thang",
			(BiConsumer<DashboardBaoHiem, Integer>)DashboardBaoHiem::setThang);
		attributeGetterFunctions.put("orgId", DashboardBaoHiem::getOrgId);
		attributeSetterBiConsumers.put(
			"orgId",
			(BiConsumer<DashboardBaoHiem, Long>)DashboardBaoHiem::setOrgId);
		attributeGetterFunctions.put("orgName", DashboardBaoHiem::getOrgName);
		attributeSetterBiConsumers.put(
			"orgName",
			(BiConsumer<DashboardBaoHiem, String>)DashboardBaoHiem::setOrgName);
		attributeGetterFunctions.put("drgMa", DashboardBaoHiem::getDrgMa);
		attributeSetterBiConsumers.put(
			"drgMa",
			(BiConsumer<DashboardBaoHiem, String>)DashboardBaoHiem::setDrgMa);
		attributeGetterFunctions.put("drgTen", DashboardBaoHiem::getDrgTen);
		attributeSetterBiConsumers.put(
			"drgTen",
			(BiConsumer<DashboardBaoHiem, String>)DashboardBaoHiem::setDrgTen);
		attributeGetterFunctions.put("drgValue", DashboardBaoHiem::getDrgValue);
		attributeSetterBiConsumers.put(
			"drgValue",
			(BiConsumer<DashboardBaoHiem, Double>)
				DashboardBaoHiem::setDrgValue);
		attributeGetterFunctions.put("drgUp", DashboardBaoHiem::getDrgUp);
		attributeSetterBiConsumers.put(
			"drgUp",
			(BiConsumer<DashboardBaoHiem, Double>)DashboardBaoHiem::setDrgUp);
		attributeGetterFunctions.put("drgDown", DashboardBaoHiem::getDrgDown);
		attributeSetterBiConsumers.put(
			"drgDown",
			(BiConsumer<DashboardBaoHiem, Double>)DashboardBaoHiem::setDrgDown);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public int getMucBc() {
		return _mucBc;
	}

	@Override
	public void setMucBc(int mucBc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mucBc = mucBc;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalMucBc() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("muc_bc"));
	}

	@JSON
	@Override
	public int getNam() {
		return _nam;
	}

	@Override
	public void setNam(int nam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nam = nam;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalNam() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("nam"));
	}

	@JSON
	@Override
	public int getThang() {
		return _thang;
	}

	@Override
	public void setThang(int thang) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thang = thang;
	}

	@JSON
	@Override
	public long getOrgId() {
		return _orgId;
	}

	@Override
	public void setOrgId(long orgId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgId = orgId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrgId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("organization_id"));
	}

	@JSON
	@Override
	public String getOrgName() {
		if (_orgName == null) {
			return "";
		}
		else {
			return _orgName;
		}
	}

	@Override
	public void setOrgName(String orgName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgName = orgName;
	}

	@JSON
	@Override
	public String getDrgMa() {
		if (_drgMa == null) {
			return "";
		}
		else {
			return _drgMa;
		}
	}

	@Override
	public void setDrgMa(String drgMa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drgMa = drgMa;
	}

	@JSON
	@Override
	public String getDrgTen() {
		if (_drgTen == null) {
			return "";
		}
		else {
			return _drgTen;
		}
	}

	@Override
	public void setDrgTen(String drgTen) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drgTen = drgTen;
	}

	@JSON
	@Override
	public double getDrgValue() {
		return _drgValue;
	}

	@Override
	public void setDrgValue(double drgValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drgValue = drgValue;
	}

	@JSON
	@Override
	public double getDrgUp() {
		return _drgUp;
	}

	@Override
	public void setDrgUp(double drgUp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drgUp = drgUp;
	}

	@JSON
	@Override
	public double getDrgDown() {
		return _drgDown;
	}

	@Override
	public void setDrgDown(double drgDown) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drgDown = drgDown;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DashboardBaoHiem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DashboardBaoHiem toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DashboardBaoHiem>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DashboardBaoHiemImpl dashboardBaoHiemImpl = new DashboardBaoHiemImpl();

		dashboardBaoHiemImpl.setId(getId());
		dashboardBaoHiemImpl.setMucBc(getMucBc());
		dashboardBaoHiemImpl.setNam(getNam());
		dashboardBaoHiemImpl.setThang(getThang());
		dashboardBaoHiemImpl.setOrgId(getOrgId());
		dashboardBaoHiemImpl.setOrgName(getOrgName());
		dashboardBaoHiemImpl.setDrgMa(getDrgMa());
		dashboardBaoHiemImpl.setDrgTen(getDrgTen());
		dashboardBaoHiemImpl.setDrgValue(getDrgValue());
		dashboardBaoHiemImpl.setDrgUp(getDrgUp());
		dashboardBaoHiemImpl.setDrgDown(getDrgDown());

		dashboardBaoHiemImpl.resetOriginalValues();

		return dashboardBaoHiemImpl;
	}

	@Override
	public int compareTo(DashboardBaoHiem dashboardBaoHiem) {
		int value = 0;

		if (getThang() < dashboardBaoHiem.getThang()) {
			value = -1;
		}
		else if (getThang() > dashboardBaoHiem.getThang()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DashboardBaoHiem)) {
			return false;
		}

		DashboardBaoHiem dashboardBaoHiem = (DashboardBaoHiem)object;

		long primaryKey = dashboardBaoHiem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DashboardBaoHiem> toCacheModel() {
		DashboardBaoHiemCacheModel dashboardBaoHiemCacheModel =
			new DashboardBaoHiemCacheModel();

		dashboardBaoHiemCacheModel.id = getId();

		dashboardBaoHiemCacheModel.mucBc = getMucBc();

		dashboardBaoHiemCacheModel.nam = getNam();

		dashboardBaoHiemCacheModel.thang = getThang();

		dashboardBaoHiemCacheModel.orgId = getOrgId();

		dashboardBaoHiemCacheModel.orgName = getOrgName();

		String orgName = dashboardBaoHiemCacheModel.orgName;

		if ((orgName != null) && (orgName.length() == 0)) {
			dashboardBaoHiemCacheModel.orgName = null;
		}

		dashboardBaoHiemCacheModel.drgMa = getDrgMa();

		String drgMa = dashboardBaoHiemCacheModel.drgMa;

		if ((drgMa != null) && (drgMa.length() == 0)) {
			dashboardBaoHiemCacheModel.drgMa = null;
		}

		dashboardBaoHiemCacheModel.drgTen = getDrgTen();

		String drgTen = dashboardBaoHiemCacheModel.drgTen;

		if ((drgTen != null) && (drgTen.length() == 0)) {
			dashboardBaoHiemCacheModel.drgTen = null;
		}

		dashboardBaoHiemCacheModel.drgValue = getDrgValue();

		dashboardBaoHiemCacheModel.drgUp = getDrgUp();

		dashboardBaoHiemCacheModel.drgDown = getDrgDown();

		return dashboardBaoHiemCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DashboardBaoHiem, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DashboardBaoHiem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DashboardBaoHiem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DashboardBaoHiem)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DashboardBaoHiem, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DashboardBaoHiem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DashboardBaoHiem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DashboardBaoHiem)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DashboardBaoHiem>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private int _mucBc;
	private int _nam;
	private int _thang;
	private long _orgId;
	private String _orgName;
	private String _drgMa;
	private String _drgTen;
	private double _drgValue;
	private double _drgUp;
	private double _drgDown;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DashboardBaoHiem, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DashboardBaoHiem)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id", _id);
		_columnOriginalValues.put("muc_bc", _mucBc);
		_columnOriginalValues.put("nam", _nam);
		_columnOriginalValues.put("thang", _thang);
		_columnOriginalValues.put("organization_id", _orgId);
		_columnOriginalValues.put("organization_name", _orgName);
		_columnOriginalValues.put("drg_ma", _drgMa);
		_columnOriginalValues.put("drg_ten", _drgTen);
		_columnOriginalValues.put("drg_value", _drgValue);
		_columnOriginalValues.put("drg_up", _drgUp);
		_columnOriginalValues.put("drg_down", _drgDown);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("muc_bc", "mucBc");
		attributeNames.put("organization_id", "orgId");
		attributeNames.put("organization_name", "orgName");
		attributeNames.put("drg_ma", "drgMa");
		attributeNames.put("drg_ten", "drgTen");
		attributeNames.put("drg_value", "drgValue");
		attributeNames.put("drg_up", "drgUp");
		attributeNames.put("drg_down", "drgDown");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id", 1L);

		columnBitmasks.put("muc_bc", 2L);

		columnBitmasks.put("nam", 4L);

		columnBitmasks.put("thang", 8L);

		columnBitmasks.put("organization_id", 16L);

		columnBitmasks.put("organization_name", 32L);

		columnBitmasks.put("drg_ma", 64L);

		columnBitmasks.put("drg_ten", 128L);

		columnBitmasks.put("drg_value", 256L);

		columnBitmasks.put("drg_up", 512L);

		columnBitmasks.put("drg_down", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DashboardBaoHiem _escapedModel;

}