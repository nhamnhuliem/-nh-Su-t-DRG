/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package drg.moh.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import drg.moh.service.model.DashboardDinhSuat;
import drg.moh.service.model.DashboardDinhSuatModel;
import drg.moh.service.model.DashboardDinhSuatSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DashboardDinhSuat service. Represents a row in the &quot;rp_dashboard_dinhsuat&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DashboardDinhSuatModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DashboardDinhSuatImpl}.
 * </p>
 *
 * @author SON
 * @see DashboardDinhSuatImpl
 * @generated
 */
@JSON(strict = true)
public class DashboardDinhSuatModelImpl
	extends BaseModelImpl<DashboardDinhSuat> implements DashboardDinhSuatModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dashboard dinh suat model instance should use the <code>DashboardDinhSuat</code> interface instead.
	 */
	public static final String TABLE_NAME = "rp_dashboard_dinhsuat";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"muc_bc", Types.INTEGER}, {"nam", Types.INTEGER},
		{"thang", Types.INTEGER}, {"organization_id", Types.BIGINT},
		{"organization_name", Types.VARCHAR},
		{"dinhsuat_tieuchuan", Types.DOUBLE}, {"dinhsuat_thucte", Types.DOUBLE},
		{"dinhsuat_benhnhan", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("muc_bc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nam", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("thang", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("organization_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organization_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dinhsuat_tieuchuan", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("dinhsuat_thucte", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("dinhsuat_benhnhan", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rp_dashboard_dinhsuat (id LONG not null primary key,muc_bc INTEGER,nam INTEGER,thang INTEGER,organization_id LONG,organization_name VARCHAR(75) null,dinhsuat_tieuchuan DOUBLE,dinhsuat_thucte DOUBLE,dinhsuat_benhnhan DOUBLE)";

	public static final String TABLE_SQL_DROP =
		"drop table rp_dashboard_dinhsuat";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dashboardDinhSuat.thang ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rp_dashboard_dinhsuat.thang ASC";

	public static final String DATA_SOURCE = "drgDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MUCBC_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAM_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ORGID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long THANG_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static DashboardDinhSuat toModel(DashboardDinhSuatSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DashboardDinhSuat model = new DashboardDinhSuatImpl();

		model.setId(soapModel.getId());
		model.setMucBc(soapModel.getMucBc());
		model.setNam(soapModel.getNam());
		model.setThang(soapModel.getThang());
		model.setOrgId(soapModel.getOrgId());
		model.setOrgName(soapModel.getOrgName());
		model.setDinhSuatTieuChuan(soapModel.getDinhSuatTieuChuan());
		model.setDinhSuatThucTe(soapModel.getDinhSuatThucTe());
		model.setDinhSuatBenhNhan(soapModel.getDinhSuatBenhNhan());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<DashboardDinhSuat> toModels(
		DashboardDinhSuatSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<DashboardDinhSuat> models = new ArrayList<DashboardDinhSuat>(
			soapModels.length);

		for (DashboardDinhSuatSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		drg.moh.service.service.util.ServiceProps.get(
			"lock.expiration.time.drg.moh.service.model.DashboardDinhSuat"));

	public DashboardDinhSuatModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DashboardDinhSuat.class;
	}

	@Override
	public String getModelClassName() {
		return DashboardDinhSuat.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DashboardDinhSuat, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DashboardDinhSuat, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DashboardDinhSuat, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DashboardDinhSuat)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DashboardDinhSuat, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DashboardDinhSuat, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DashboardDinhSuat)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DashboardDinhSuat, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DashboardDinhSuat, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DashboardDinhSuat>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DashboardDinhSuat.class.getClassLoader(), DashboardDinhSuat.class,
			ModelWrapper.class);

		try {
			Constructor<DashboardDinhSuat> constructor =
				(Constructor<DashboardDinhSuat>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DashboardDinhSuat, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DashboardDinhSuat, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DashboardDinhSuat, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DashboardDinhSuat, Object>>();
		Map<String, BiConsumer<DashboardDinhSuat, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DashboardDinhSuat, ?>>();

		attributeGetterFunctions.put("id", DashboardDinhSuat::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<DashboardDinhSuat, Long>)DashboardDinhSuat::setId);
		attributeGetterFunctions.put("mucBc", DashboardDinhSuat::getMucBc);
		attributeSetterBiConsumers.put(
			"mucBc",
			(BiConsumer<DashboardDinhSuat, Integer>)
				DashboardDinhSuat::setMucBc);
		attributeGetterFunctions.put("nam", DashboardDinhSuat::getNam);
		attributeSetterBiConsumers.put(
			"nam",
			(BiConsumer<DashboardDinhSuat, Integer>)DashboardDinhSuat::setNam);
		attributeGetterFunctions.put("thang", DashboardDinhSuat::getThang);
		attributeSetterBiConsumers.put(
			"thang",
			(BiConsumer<DashboardDinhSuat, Integer>)
				DashboardDinhSuat::setThang);
		attributeGetterFunctions.put("orgId", DashboardDinhSuat::getOrgId);
		attributeSetterBiConsumers.put(
			"orgId",
			(BiConsumer<DashboardDinhSuat, Long>)DashboardDinhSuat::setOrgId);
		attributeGetterFunctions.put("orgName", DashboardDinhSuat::getOrgName);
		attributeSetterBiConsumers.put(
			"orgName",
			(BiConsumer<DashboardDinhSuat, String>)
				DashboardDinhSuat::setOrgName);
		attributeGetterFunctions.put(
			"dinhSuatTieuChuan", DashboardDinhSuat::getDinhSuatTieuChuan);
		attributeSetterBiConsumers.put(
			"dinhSuatTieuChuan",
			(BiConsumer<DashboardDinhSuat, Double>)
				DashboardDinhSuat::setDinhSuatTieuChuan);
		attributeGetterFunctions.put(
			"dinhSuatThucTe", DashboardDinhSuat::getDinhSuatThucTe);
		attributeSetterBiConsumers.put(
			"dinhSuatThucTe",
			(BiConsumer<DashboardDinhSuat, Double>)
				DashboardDinhSuat::setDinhSuatThucTe);
		attributeGetterFunctions.put(
			"dinhSuatBenhNhan", DashboardDinhSuat::getDinhSuatBenhNhan);
		attributeSetterBiConsumers.put(
			"dinhSuatBenhNhan",
			(BiConsumer<DashboardDinhSuat, Double>)
				DashboardDinhSuat::setDinhSuatBenhNhan);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public int getMucBc() {
		return _mucBc;
	}

	@Override
	public void setMucBc(int mucBc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mucBc = mucBc;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalMucBc() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("muc_bc"));
	}

	@JSON
	@Override
	public int getNam() {
		return _nam;
	}

	@Override
	public void setNam(int nam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nam = nam;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalNam() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("nam"));
	}

	@JSON
	@Override
	public int getThang() {
		return _thang;
	}

	@Override
	public void setThang(int thang) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thang = thang;
	}

	@JSON
	@Override
	public long getOrgId() {
		return _orgId;
	}

	@Override
	public void setOrgId(long orgId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgId = orgId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrgId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("organization_id"));
	}

	@JSON
	@Override
	public String getOrgName() {
		if (_orgName == null) {
			return "";
		}
		else {
			return _orgName;
		}
	}

	@Override
	public void setOrgName(String orgName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgName = orgName;
	}

	@JSON
	@Override
	public double getDinhSuatTieuChuan() {
		return _dinhSuatTieuChuan;
	}

	@Override
	public void setDinhSuatTieuChuan(double dinhSuatTieuChuan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dinhSuatTieuChuan = dinhSuatTieuChuan;
	}

	@JSON
	@Override
	public double getDinhSuatThucTe() {
		return _dinhSuatThucTe;
	}

	@Override
	public void setDinhSuatThucTe(double dinhSuatThucTe) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dinhSuatThucTe = dinhSuatThucTe;
	}

	@JSON
	@Override
	public double getDinhSuatBenhNhan() {
		return _dinhSuatBenhNhan;
	}

	@Override
	public void setDinhSuatBenhNhan(double dinhSuatBenhNhan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dinhSuatBenhNhan = dinhSuatBenhNhan;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DashboardDinhSuat.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DashboardDinhSuat toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DashboardDinhSuat>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DashboardDinhSuatImpl dashboardDinhSuatImpl =
			new DashboardDinhSuatImpl();

		dashboardDinhSuatImpl.setId(getId());
		dashboardDinhSuatImpl.setMucBc(getMucBc());
		dashboardDinhSuatImpl.setNam(getNam());
		dashboardDinhSuatImpl.setThang(getThang());
		dashboardDinhSuatImpl.setOrgId(getOrgId());
		dashboardDinhSuatImpl.setOrgName(getOrgName());
		dashboardDinhSuatImpl.setDinhSuatTieuChuan(getDinhSuatTieuChuan());
		dashboardDinhSuatImpl.setDinhSuatThucTe(getDinhSuatThucTe());
		dashboardDinhSuatImpl.setDinhSuatBenhNhan(getDinhSuatBenhNhan());

		dashboardDinhSuatImpl.resetOriginalValues();

		return dashboardDinhSuatImpl;
	}

	@Override
	public int compareTo(DashboardDinhSuat dashboardDinhSuat) {
		int value = 0;

		if (getThang() < dashboardDinhSuat.getThang()) {
			value = -1;
		}
		else if (getThang() > dashboardDinhSuat.getThang()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DashboardDinhSuat)) {
			return false;
		}

		DashboardDinhSuat dashboardDinhSuat = (DashboardDinhSuat)object;

		long primaryKey = dashboardDinhSuat.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DashboardDinhSuat> toCacheModel() {
		DashboardDinhSuatCacheModel dashboardDinhSuatCacheModel =
			new DashboardDinhSuatCacheModel();

		dashboardDinhSuatCacheModel.id = getId();

		dashboardDinhSuatCacheModel.mucBc = getMucBc();

		dashboardDinhSuatCacheModel.nam = getNam();

		dashboardDinhSuatCacheModel.thang = getThang();

		dashboardDinhSuatCacheModel.orgId = getOrgId();

		dashboardDinhSuatCacheModel.orgName = getOrgName();

		String orgName = dashboardDinhSuatCacheModel.orgName;

		if ((orgName != null) && (orgName.length() == 0)) {
			dashboardDinhSuatCacheModel.orgName = null;
		}

		dashboardDinhSuatCacheModel.dinhSuatTieuChuan = getDinhSuatTieuChuan();

		dashboardDinhSuatCacheModel.dinhSuatThucTe = getDinhSuatThucTe();

		dashboardDinhSuatCacheModel.dinhSuatBenhNhan = getDinhSuatBenhNhan();

		return dashboardDinhSuatCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DashboardDinhSuat, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DashboardDinhSuat, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DashboardDinhSuat, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DashboardDinhSuat)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DashboardDinhSuat, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DashboardDinhSuat, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DashboardDinhSuat, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DashboardDinhSuat)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DashboardDinhSuat>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private int _mucBc;
	private int _nam;
	private int _thang;
	private long _orgId;
	private String _orgName;
	private double _dinhSuatTieuChuan;
	private double _dinhSuatThucTe;
	private double _dinhSuatBenhNhan;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DashboardDinhSuat, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DashboardDinhSuat)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id", _id);
		_columnOriginalValues.put("muc_bc", _mucBc);
		_columnOriginalValues.put("nam", _nam);
		_columnOriginalValues.put("thang", _thang);
		_columnOriginalValues.put("organization_id", _orgId);
		_columnOriginalValues.put("organization_name", _orgName);
		_columnOriginalValues.put("dinhsuat_tieuchuan", _dinhSuatTieuChuan);
		_columnOriginalValues.put("dinhsuat_thucte", _dinhSuatThucTe);
		_columnOriginalValues.put("dinhsuat_benhnhan", _dinhSuatBenhNhan);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("muc_bc", "mucBc");
		attributeNames.put("organization_id", "orgId");
		attributeNames.put("organization_name", "orgName");
		attributeNames.put("dinhsuat_tieuchuan", "dinhSuatTieuChuan");
		attributeNames.put("dinhsuat_thucte", "dinhSuatThucTe");
		attributeNames.put("dinhsuat_benhnhan", "dinhSuatBenhNhan");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id", 1L);

		columnBitmasks.put("muc_bc", 2L);

		columnBitmasks.put("nam", 4L);

		columnBitmasks.put("thang", 8L);

		columnBitmasks.put("organization_id", 16L);

		columnBitmasks.put("organization_name", 32L);

		columnBitmasks.put("dinhsuat_tieuchuan", 64L);

		columnBitmasks.put("dinhsuat_thucte", 128L);

		columnBitmasks.put("dinhsuat_benhnhan", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DashboardDinhSuat _escapedModel;

}