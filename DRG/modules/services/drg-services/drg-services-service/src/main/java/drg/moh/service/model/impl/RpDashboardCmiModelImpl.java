/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package drg.moh.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import drg.moh.service.model.RpDashboardCmi;
import drg.moh.service.model.RpDashboardCmiModel;
import drg.moh.service.model.RpDashboardCmiSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RpDashboardCmi service. Represents a row in the &quot;rp_dashboard_cmi&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RpDashboardCmiModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RpDashboardCmiImpl}.
 * </p>
 *
 * @author SON
 * @see RpDashboardCmiImpl
 * @generated
 */
@JSON(strict = true)
public class RpDashboardCmiModelImpl
	extends BaseModelImpl<RpDashboardCmi> implements RpDashboardCmiModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rp dashboard cmi model instance should use the <code>RpDashboardCmi</code> interface instead.
	 */
	public static final String TABLE_NAME = "rp_dashboard_cmi";

	public static final Object[][] TABLE_COLUMNS = {
		{"_id", Types.BIGINT}, {"_cmi_toanquoc", Types.DOUBLE},
		{"_cmi_tinh", Types.DOUBLE}, {"_cmi_tuyen", Types.VARCHAR},
		{"_cmi_trungbinh", Types.DOUBLE}, {"_cmi_trungmax", Types.DOUBLE},
		{"_cmi_trungmin", Types.DOUBLE}, {"_cmi_coso", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("_cmi_toanquoc", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("_cmi_tinh", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("_cmi_tuyen", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("_cmi_trungbinh", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("_cmi_trungmax", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("_cmi_trungmin", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("_cmi_coso", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rp_dashboard_cmi (_id LONG not null primary key,_cmi_toanquoc DOUBLE,_cmi_tinh DOUBLE,_cmi_tuyen VARCHAR(75) null,_cmi_trungbinh DOUBLE,_cmi_trungmax DOUBLE,_cmi_trungmin DOUBLE,_cmi_coso DOUBLE)";

	public static final String TABLE_SQL_DROP = "drop table rp_dashboard_cmi";

	public static final String ORDER_BY_JPQL =
		" ORDER BY rpDashboardCmi.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rp_dashboard_cmi._id ASC";

	public static final String DATA_SOURCE = "drgDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static RpDashboardCmi toModel(RpDashboardCmiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RpDashboardCmi model = new RpDashboardCmiImpl();

		model.setId(soapModel.getId());
		model.setCmiToanQuoc(soapModel.getCmiToanQuoc());
		model.setCmiTinh(soapModel.getCmiTinh());
		model.setCmiTuyen(soapModel.getCmiTuyen());
		model.setCmiTrungBinh(soapModel.getCmiTrungBinh());
		model.setCmiTrungMax(soapModel.getCmiTrungMax());
		model.setCmiTrungMin(soapModel.getCmiTrungMin());
		model.setCmiCoSo(soapModel.getCmiCoSo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<RpDashboardCmi> toModels(
		RpDashboardCmiSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<RpDashboardCmi> models = new ArrayList<RpDashboardCmi>(
			soapModels.length);

		for (RpDashboardCmiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		drg.moh.service.service.util.ServiceProps.get(
			"lock.expiration.time.drg.moh.service.model.RpDashboardCmi"));

	public RpDashboardCmiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RpDashboardCmi.class;
	}

	@Override
	public String getModelClassName() {
		return RpDashboardCmi.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RpDashboardCmi, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RpDashboardCmi, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RpDashboardCmi, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RpDashboardCmi)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RpDashboardCmi, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RpDashboardCmi, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RpDashboardCmi)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RpDashboardCmi, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RpDashboardCmi, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, RpDashboardCmi>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			RpDashboardCmi.class.getClassLoader(), RpDashboardCmi.class,
			ModelWrapper.class);

		try {
			Constructor<RpDashboardCmi> constructor =
				(Constructor<RpDashboardCmi>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<RpDashboardCmi, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RpDashboardCmi, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RpDashboardCmi, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<RpDashboardCmi, Object>>();
		Map<String, BiConsumer<RpDashboardCmi, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RpDashboardCmi, ?>>();

		attributeGetterFunctions.put("id", RpDashboardCmi::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<RpDashboardCmi, Long>)RpDashboardCmi::setId);
		attributeGetterFunctions.put(
			"cmiToanQuoc", RpDashboardCmi::getCmiToanQuoc);
		attributeSetterBiConsumers.put(
			"cmiToanQuoc",
			(BiConsumer<RpDashboardCmi, Double>)RpDashboardCmi::setCmiToanQuoc);
		attributeGetterFunctions.put("cmiTinh", RpDashboardCmi::getCmiTinh);
		attributeSetterBiConsumers.put(
			"cmiTinh",
			(BiConsumer<RpDashboardCmi, Double>)RpDashboardCmi::setCmiTinh);
		attributeGetterFunctions.put("cmiTuyen", RpDashboardCmi::getCmiTuyen);
		attributeSetterBiConsumers.put(
			"cmiTuyen",
			(BiConsumer<RpDashboardCmi, String>)RpDashboardCmi::setCmiTuyen);
		attributeGetterFunctions.put(
			"cmiTrungBinh", RpDashboardCmi::getCmiTrungBinh);
		attributeSetterBiConsumers.put(
			"cmiTrungBinh",
			(BiConsumer<RpDashboardCmi, Double>)
				RpDashboardCmi::setCmiTrungBinh);
		attributeGetterFunctions.put(
			"cmiTrungMax", RpDashboardCmi::getCmiTrungMax);
		attributeSetterBiConsumers.put(
			"cmiTrungMax",
			(BiConsumer<RpDashboardCmi, Double>)RpDashboardCmi::setCmiTrungMax);
		attributeGetterFunctions.put(
			"cmiTrungMin", RpDashboardCmi::getCmiTrungMin);
		attributeSetterBiConsumers.put(
			"cmiTrungMin",
			(BiConsumer<RpDashboardCmi, Double>)RpDashboardCmi::setCmiTrungMin);
		attributeGetterFunctions.put("cmiCoSo", RpDashboardCmi::getCmiCoSo);
		attributeSetterBiConsumers.put(
			"cmiCoSo",
			(BiConsumer<RpDashboardCmi, Double>)RpDashboardCmi::setCmiCoSo);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public double getCmiToanQuoc() {
		return _cmiToanQuoc;
	}

	@Override
	public void setCmiToanQuoc(double cmiToanQuoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cmiToanQuoc = cmiToanQuoc;
	}

	@JSON
	@Override
	public double getCmiTinh() {
		return _cmiTinh;
	}

	@Override
	public void setCmiTinh(double cmiTinh) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cmiTinh = cmiTinh;
	}

	@JSON
	@Override
	public String getCmiTuyen() {
		if (_cmiTuyen == null) {
			return "";
		}
		else {
			return _cmiTuyen;
		}
	}

	@Override
	public void setCmiTuyen(String cmiTuyen) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cmiTuyen = cmiTuyen;
	}

	@JSON
	@Override
	public double getCmiTrungBinh() {
		return _cmiTrungBinh;
	}

	@Override
	public void setCmiTrungBinh(double cmiTrungBinh) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cmiTrungBinh = cmiTrungBinh;
	}

	@JSON
	@Override
	public double getCmiTrungMax() {
		return _cmiTrungMax;
	}

	@Override
	public void setCmiTrungMax(double cmiTrungMax) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cmiTrungMax = cmiTrungMax;
	}

	@JSON
	@Override
	public double getCmiTrungMin() {
		return _cmiTrungMin;
	}

	@Override
	public void setCmiTrungMin(double cmiTrungMin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cmiTrungMin = cmiTrungMin;
	}

	@JSON
	@Override
	public double getCmiCoSo() {
		return _cmiCoSo;
	}

	@Override
	public void setCmiCoSo(double cmiCoSo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cmiCoSo = cmiCoSo;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RpDashboardCmi.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RpDashboardCmi toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RpDashboardCmi>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RpDashboardCmiImpl rpDashboardCmiImpl = new RpDashboardCmiImpl();

		rpDashboardCmiImpl.setId(getId());
		rpDashboardCmiImpl.setCmiToanQuoc(getCmiToanQuoc());
		rpDashboardCmiImpl.setCmiTinh(getCmiTinh());
		rpDashboardCmiImpl.setCmiTuyen(getCmiTuyen());
		rpDashboardCmiImpl.setCmiTrungBinh(getCmiTrungBinh());
		rpDashboardCmiImpl.setCmiTrungMax(getCmiTrungMax());
		rpDashboardCmiImpl.setCmiTrungMin(getCmiTrungMin());
		rpDashboardCmiImpl.setCmiCoSo(getCmiCoSo());

		rpDashboardCmiImpl.resetOriginalValues();

		return rpDashboardCmiImpl;
	}

	@Override
	public int compareTo(RpDashboardCmi rpDashboardCmi) {
		long primaryKey = rpDashboardCmi.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RpDashboardCmi)) {
			return false;
		}

		RpDashboardCmi rpDashboardCmi = (RpDashboardCmi)object;

		long primaryKey = rpDashboardCmi.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RpDashboardCmi> toCacheModel() {
		RpDashboardCmiCacheModel rpDashboardCmiCacheModel =
			new RpDashboardCmiCacheModel();

		rpDashboardCmiCacheModel.id = getId();

		rpDashboardCmiCacheModel.cmiToanQuoc = getCmiToanQuoc();

		rpDashboardCmiCacheModel.cmiTinh = getCmiTinh();

		rpDashboardCmiCacheModel.cmiTuyen = getCmiTuyen();

		String cmiTuyen = rpDashboardCmiCacheModel.cmiTuyen;

		if ((cmiTuyen != null) && (cmiTuyen.length() == 0)) {
			rpDashboardCmiCacheModel.cmiTuyen = null;
		}

		rpDashboardCmiCacheModel.cmiTrungBinh = getCmiTrungBinh();

		rpDashboardCmiCacheModel.cmiTrungMax = getCmiTrungMax();

		rpDashboardCmiCacheModel.cmiTrungMin = getCmiTrungMin();

		rpDashboardCmiCacheModel.cmiCoSo = getCmiCoSo();

		return rpDashboardCmiCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RpDashboardCmi, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RpDashboardCmi, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RpDashboardCmi, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((RpDashboardCmi)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RpDashboardCmi, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RpDashboardCmi, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RpDashboardCmi, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RpDashboardCmi)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RpDashboardCmi>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private double _cmiToanQuoc;
	private double _cmiTinh;
	private String _cmiTuyen;
	private double _cmiTrungBinh;
	private double _cmiTrungMax;
	private double _cmiTrungMin;
	private double _cmiCoSo;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<RpDashboardCmi, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RpDashboardCmi)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("_id", _id);
		_columnOriginalValues.put("_cmi_toanquoc", _cmiToanQuoc);
		_columnOriginalValues.put("_cmi_tinh", _cmiTinh);
		_columnOriginalValues.put("_cmi_tuyen", _cmiTuyen);
		_columnOriginalValues.put("_cmi_trungbinh", _cmiTrungBinh);
		_columnOriginalValues.put("_cmi_trungmax", _cmiTrungMax);
		_columnOriginalValues.put("_cmi_trungmin", _cmiTrungMin);
		_columnOriginalValues.put("_cmi_coso", _cmiCoSo);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("_id", "id");
		attributeNames.put("_cmi_toanquoc", "cmiToanQuoc");
		attributeNames.put("_cmi_tinh", "cmiTinh");
		attributeNames.put("_cmi_tuyen", "cmiTuyen");
		attributeNames.put("_cmi_trungbinh", "cmiTrungBinh");
		attributeNames.put("_cmi_trungmax", "cmiTrungMax");
		attributeNames.put("_cmi_trungmin", "cmiTrungMin");
		attributeNames.put("_cmi_coso", "cmiCoSo");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("_id", 1L);

		columnBitmasks.put("_cmi_toanquoc", 2L);

		columnBitmasks.put("_cmi_tinh", 4L);

		columnBitmasks.put("_cmi_tuyen", 8L);

		columnBitmasks.put("_cmi_trungbinh", 16L);

		columnBitmasks.put("_cmi_trungmax", 32L);

		columnBitmasks.put("_cmi_trungmin", 64L);

		columnBitmasks.put("_cmi_coso", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RpDashboardCmi _escapedModel;

}